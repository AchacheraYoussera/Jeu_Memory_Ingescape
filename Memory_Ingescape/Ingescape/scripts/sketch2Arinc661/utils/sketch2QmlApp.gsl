.ignorecase = 0
.template 0


#init global variables
global.sketch2qml_generateStandaloneApp = defined(global.project_sketchGenerateStandaloneApp) & global.project_sketchGenerateStandaloneApp
global.sketch2qml_destinationRootDir = global.project_graphicFolder ? "."
global.sketch2qml_appOrLibraryRawName = "$(app.name)App"
global.sketch2qml_appOrLibraryName = "$(app.name: pascal)App"
global.sketch2qml_appOrLibraryDir = "$(global.sketch2qml_destinationRootDir)/$(global.sketch2qml_appOrLibraryName)"
global.sketch2qml_libraryName = "$(app.name: pascal)"
global.sketch2qml_isApp = 1
# - NB: we assume that Ingescape Circle will only export Qt6 projects
global.sketch2qml_useQt5 = defined(global.project_useQt5) & global.project_useQt5
global.sketch2qml_tabWidth = 4 

# Debug purpole only: render items that do not belong to any artboard
global.sketch2qml_renderOrphanItemsInApp = 0



if defined(global.project_scriptFolder)
    global.sketch2qml_scriptsDir = global.project_scriptFolder
    global.sketch2qml_scriptsResourcesDir = "$(global.sketch2qml_scriptsDir)/sketch2Qml"
elsif regexp.match("^(.*)/[^/]+$", "$(script)", currentScriptRootDir)
    global.sketch2qml_scriptsDir = currentScriptRootDir
    global.sketch2qml_scriptsResourcesDir = "$(global.sketch2qml_scriptsDir)/../sketch2Qml"
else
    global.sketch2qml_scriptsDir = "../gsl_scripts/utils"
    global.sketch2qml_scriptsResourcesDir = "../gsl_scripts/sketch2Qml"
endif
echo "Using resources directory $(global.sketch2qml_scriptsResourcesDir)"


#load additional scripts
gsl from "$(global.sketch2qml_scriptsDir)/sketch2QmlCommon.gsl"


#init other global variables
global.sketch2qml_appOrLibrarySubPath = getAppOrLibrarySubPath(global.sketch2qml_appOrLibraryRawName)
global.sketch2qml_appOrLibraryQmlModule = getAppOrLibraryQmlModuleName(global.sketch2qml_appOrLibraryRawName)
global.sketch2qml_libraryQmlModule = getAppOrLibraryQmlModuleName(app.name)


#init directories
echo "Initiating $(global.sketch2qml_appOrLibraryDir) project directory structure"
initDirectories()
copyResourcesFiles()


# include possible external XML files (cpp classes, QML library, etc.)
for app.page
    includeExternals(page, app)
endfor


######################################################
function addAdditionalPRIs(page)
    for my.page.include
        generateIncludePRI("$(include.path)")
    endfor
    for my.page.item
        addAdditionalPRIs(item)
    endfor
endfunction addAdditionalPRIs

######################################################
function addRegistersInMainCpp(page)
    for my.page.include
>    $(include.name: pascal)::registerTypes();
    endfor
    for my.page.item
        addRegistersInMainCpp(item)
    endfor
endfunction addRegistersInMainCpp

######################################################
function addIncludesInMainCpp(page)
    for my.page.include
>#include <$(include.name: pascal, lower).h>
    endfor
    for my.page.item
        addIncludesInMainCpp(item)
    endfor
endfunction addIncludesInMainCpp

.endtemplate
.template 1
.##########################################################
.# .PRI
.echo "Generating $(global.sketch2qml_appOrLibraryName).pri"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName).pri"
#-------------------------------------------------
#
# File generated by Ingescape Circle on $(date.picture())
#
#-------------------------------------------------

INCLUDEPATH += $$PWD

DEFINES += $(global.sketch2qml_appOrLibraryName:UPPER)_LIBRARY

QT      += qml quick quick-private

SOURCES += \\
        $$PWD/$(global.sketch2qml_appOrLibraryName:lower)_qml.cpp $((defined(app->classes)) ?? "\\")
.for app.classes
.   for classes.class
    $$PWD/$(class.path)$(class.name: pascal, lower).cpp$(!last(class) ?? " \\")
.   endfor
.endfor


HEADERS += \\
        $$PWD/$(global.sketch2qml_appOrLibraryName:lower)_qml.h \\
        $$PWD/$(global.sketch2qml_appOrLibraryName:lower)_global.h $(defined(app->classes) ?? "\\")
.for app.classes
.   for classes.class
    $$PWD/$(class.path)$(class.name: pascal, lower).h$(!last(class) ?? " \\")
.   endfor
.endfor


# Comment this line if you don't want to compile fonts
RESOURCES += $$PWD/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc


RESOURCES += \\
    $$PWD/$(global.sketch2qml_appOrLibraryName:lower).qrc


OTHER_FILES += \\
    $$PWD/qml/$(global.sketch2qml_appOrLibrarySubPath)/qmldir \\
    $$PWD/$(global.sketch2qml_appOrLibraryName).cmake


# Additional import path used to resolve QML modules in Qt Creator's code model
QML_IMPORT_PATH += $$PWD/qml

# Additional import path used to resolve QML modules just for Qt Quick Designer
QML_DESIGNER_IMPORT_PATH += $$PWD/qml


.##########################################################
.##########################################################
.# .CMAKE
.echo "Generating $(global.sketch2qml_appOrLibraryName).cmake"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName).cmake"
#-------------------------------------------------
#
# File generated by Ingescape Circle on $(date.picture())
#
#-------------------------------------------------

set($(global.sketch2qml_appOrLibraryName:UPPER)_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR})

# Comment these lines if you don't want to compile fonts
list(APPEND $(global.sketch2qml_appOrLibraryName:UPPER)_SOURCES
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc
)


list(APPEND $(global.sketch2qml_appOrLibraryName:UPPER)_SOURCES
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower)_qml.cpp
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower)_qml.h 
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower)_global.h
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower).qrc
.for app.classes
.   for classes.class
    ${CMAKE_CURRENT_LIST_DIR}/$(class.path)$(class.name: pascal, lower).cpp
    ${CMAKE_CURRENT_LIST_DIR}/$(class.path)$(class.name: pascal, lower).h
.   endfor
.endfor
)


macro (add_$(global.sketch2qml_appOrLibraryName:lower)_to_target target)
  target_sources(${target} PRIVATE ${$(global.sketch2qml_appOrLibraryName:UPPER)_SOURCES})
  target_include_directories(${target} PRIVATE ${$(global.sketch2qml_appOrLibraryName:UPPER)_INCLUDE_DIR})
  target_compile_definitions(${target} PRIVATE $(global.sketch2qml_appOrLibraryName:UPPER)_LIBRARY)
endmacro()
.##########################################################
.# .PRO
.if global.sketch2qml_generateStandaloneApp
.echo "Generating $(global.sketch2qml_appOrLibraryName).pro"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName).pro"
QT += qml quick quick-private

CONFIG(debug, debug|release) {
    QT += testlib
}

lessThan(QT_MAJOR_VERSION, 6) {
  CONFIG += c++11
} else {
  CONFIG += c++17
}

# To move all generated temp files (moc_*.cpp, qml_*.cpp, *.o, etc.) into a specific directory
OBJECTS_DIR = tmp
MOC_DIR = tmp
RCC_DIR = tmp
UI_DIR = tmp
QMLCACHE_DIR = tmp


HEADERS += \\
     ../I2SketchQuick/src/Helpers/qmlhotreloader.h

SOURCES += \\
    ../I2SketchQuick/src/Helpers/qmlhotreloader.cpp \\
    main.cpp 

OTHER_FILES += 

RESOURCES += 

DISTFILES +=

INCLUDEPATH += ../I2SketchQuick/src/Helpers


# Include PRIs
# - I2SketchQuick
.generateIncludePRI("../I2SketchQuick/src/I2SketchQuick/I2SketchQuick.pri")

# - Content of our lib and our app
.generateIncludePRI("../$(global.sketch2qml_libraryName)/$(global.sketch2qml_libraryName).pri")
.generateIncludePRI("$(global.sketch2qml_appOrLibraryName).pri")

# - others PRIs
.for app.page
.addAdditionalPRIs(page)
.endfor


# Default rules for deployment.
qnx: target.path = /tmp/$${TARGET}/bin
else: unix:!android: target.path = /opt/$${TARGET}/bin
!isEmpty(target.path): INSTALLS += target


macx {
  ICON = icon.icns

  CONFIG(release, debug|release) {
    QMAKE_POST_LINK += $$shell_quote($$shell_path($$[QT_INSTALL_BINS]/macdeployqt)) $${OUT_PWD}/$${TARGET}.app -qmldir=$${PWD} $$escape_expand(\\n\\t)
  }
}


win32-msvc* {
  RC_ICONS = icon.ico

  CONFIG(release, debug|release) {
    QMAKE_POST_LINK += $$shell_quote($$shell_path($$[QT_INSTALL_BINS]/windeployqt)) $${OUT_PWD}/$${TARGET}.exe -qmldir=$${PWD} $$escape_expand(\\n\\t)
  }
}

.endif
.##########################################################
.# main.cpp
.if global.sketch2qml_generateStandaloneApp
.echo "Generating main.cpp"
.output "$(global.sketch2qml_appOrLibraryDir)/main.cpp"
.generateCopyright()

#include <QGuiApplication>
#include <QQmlApplicationEngine>
#include <QStyleHints>
#include <QSurfaceFormat>
#include <QtQml>
#include <QDebug>
#include <QDir>

#include "qmlhotreloader.h"
#include "i2sketchquick.h"

#include "$(global.sketch2qml_libraryName:lower)_qml.h"
#include "$(global.sketch2qml_appOrLibraryName:lower)_qml.h"
.for app.page
.addIncludesInMainCpp(page)
.endfor


int main(int argc, char *argv[])
{
    //------------------------------
    // Configure Qt
    //------------------------------

#ifdef QT_DEBUG
    // Print out general information about various parts of the scene graph and the graphics stack
    QLoggingCategory::setFilterRules("qt.scenegraph.general = true");
    qSetMessagePattern("[%{time hh:mm:ss.zzz}][%{type}] %{if-category}%{category}: %{endif}file://%{file}:%{line} - %{message}");
#endif

#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
    QCoreApplication::setAttribute(Qt::AA_EnableHighDpiScaling);
  #ifdef Q_OS_WIN
    QGuiApplication::setHighDpiScaleFactorRoundingPolicy(Qt::HighDpiScaleFactorRoundingPolicy::PassThrough);
  #endif
#endif


    //------------------------------
    // Configure our application
    //------------------------------

    // Change focus behaviors for tab navigation
    QGuiApplication::styleHints()->setTabFocusBehavior(Qt::TabFocusAllControls);

    QGuiApplication app(argc, argv);
    app.setOrganizationName("Ingenuity io");
    app.setOrganizationDomain("ingenuity.io");
    app.setApplicationName("$(app.name: pascal)");

    // MSAA 4x
    QSurfaceFormat surfaceFormat;
    surfaceFormat.setSamples(4);
    QSurfaceFormat::setDefaultFormat(surfaceFormat);

    //------------------------------
    // Configure QML engine
    //------------------------------
    QQmlApplicationEngine engine;

    // Register QML types
    I2SketchQuick::registerTypes();
    $(global.sketch2qml_libraryName)Qml::registerTypes();  
    $(global.sketch2qml_appOrLibraryName)Qml::registerTypes();   
    qmlRegisterSingletonType<QmlHotReloader>("$(global.sketch2qml_appOrLibraryName)", 1, 0, "QmlHotReloader", &QmlHotReloader::qmlSingleton);
.for app.page
.  addRegistersInMainCpp(page)
.endfor

    // Configure hot reload
    QmlHotReloader::instance().setengine(&engine);
    QmlHotReloader::instance().seturl(QUrl("qrc:/qml/FakeFile.qml"));

#ifdef QT_DEBUG
    auto sourceDirPath = QFileInfo(QFINDTESTDATA(__FILE__)).absolutePath();
    // App
    QmlHotReloader::instance().addRootDirPath(sourceDirPath);
    QmlHotReloader::instance().watchDirPath(QString("%1%2qml").arg(sourceDirPath).arg(QDir::separator()));
    // Library
    QString libraryDirPath = QString("%1%2").arg(sourceDirPath, "/../$(global.sketch2qml_libraryName)");
    QmlHotReloader::instance().addRootDirPath(sourceDirPath);
    QmlHotReloader::instance().watchDirPath(QString("%1%2qml").arg(libraryDirPath).arg(QDir::separator()));

    QmlHotReloader::instance().start();
#endif

    const QUrl url(QStringLiteral("qrc:/qml/main.qml"));

    QObject::connect(&engine, &QQmlApplicationEngine::objectCreated,
                     &app, [url](QObject *obj, const QUrl &objUrl) {
        if (!obj && (url == objUrl)) {
            qWarning() << "WARNING: QML engine did not load any objects, exiting.";
            QCoreApplication::exit(-1);
        }
    }, Qt::QueuedConnection);

    engine.load(url);

    return app.exec();
}
.endif
.##########################################################
.# Global header a.k.a. export header 
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower)_global.h"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_global.h"
.renderCppGlobalHeader()
.##########################################################
.# QML library cpp
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower).cpp"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_qml.cpp"
.renderCppLibrarySource(app)
.##########################################################
.# QML library header
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower).h"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_qml.h"
.renderCppLibraryHeader()
.##########################################################
.# QRC - QML and images
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower).qrc"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower).qrc.tmp"
.renderTempMainQrc(app, global.sketch2qml_generateStandaloneApp)
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower).qrc"
.renderCleanedQrc("$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower).qrc.tmp")
.file.delete("$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower).qrc.tmp")
.##########################################################
.# QRC - Fonts
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc.tmp"
.renderTempFontsQrc(app)
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc"
.renderCleanedQrc("$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc.tmp")
.file.delete("$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc.tmp")
.##########################################################
.# qmldir
.echo "Generating qmldir"
.output "$(global.sketch2qml_appOrLibraryDir)/qml/$(global.sketch2qml_appOrLibrarySubPath)/qmldir"
.renderQmldir(app)
.##########################################################
.# theme
.echo "Generating theme $(global.sketch2qml_appOrLibraryName)Theme.qml"
.output "$(global.sketch2qml_appOrLibraryDir)/qml/$(global.sketch2qml_appOrLibrarySubPath)/$(global.sketch2qml_appOrLibraryName)Theme.qml"
.renderTheme(app)
.##########################################################
.# font loaders
.echo "Generating font loaders $(global.sketch2qml_appOrLibraryName)FontLoaders.qml"
.output "$(global.sketch2qml_appOrLibraryDir)/qml/$(global.sketch2qml_appOrLibrarySubPath)/$(global.sketch2qml_appOrLibraryName)FontLoaders.qml"
.renderFontLoaders(app)
.##########################################################
.# QML files for the components
.for app.library
.   for library.component
.       echo "Generating QML for component $(component.type: Pascal)"
.       output "$(global.sketch2qml_appOrLibraryDir)/qml/$(global.sketch2qml_appOrLibrarySubPath)/$(component.type: Pascal).qml"
.       renderComponent(app, component, 1)
.   endfor
.endfor
.##########################################################
.# Screens (i.e artboards)
.for app.page
.   for page.screen
.       echo "Generating QML for artboard $(screen.name: Pascal)"
.       output "$(global.sketch2qml_appOrLibraryDir)/qml/$(global.sketch2qml_appOrLibrarySubPath)/$(screen.name: Pascal).qml"
.       renderScreen(app, screen, 0)
.       if global.sketch2qml_generateStandaloneApp
.           echo "Generating QML for Window$(screen.name: Pascal)"
.           output "$(global.sketch2qml_appOrLibraryDir)/qml/Window$(screen.name: Pascal).qml"
.           renderScreenInWindow(app, screen, 0)
.       endif
.   endfor
.endfor
.##########################################################
.# main.qml
.if global.sketch2qml_generateStandaloneApp
.echo "Generating main.qml"
.output "$(global.sketch2qml_appOrLibraryDir)/qml/main.qml"
.importCommonQmlModules()

.importAppAndLibraryQmlModules()

.importSpecificQmlModules(app)


Window {
.renderStringProperty("title", "$(app.name: pascal)", 0)
    width: 480
    height: 100
    visible: true
    color: $(app.name: pascal)AppTheme.mainWindowColor

    Component.onCompleted: {
        // Load fonts
        $(global.sketch2qml_libraryName)FontLoaders.load();
        $(global.sketch2qml_appOrLibraryName)FontLoaders.load();
    }
    
    Text {
        anchors.centerIn: parent
        text: qsTr("Close this window to stop application")
    }
.for app.page
.  for page.item
.    if (item.type = "window")

.      iterateOnItem(app, item, 1, 0, "")
.    elsif global.sketch2qml_renderOrphanItemsInApp

    Window {
.renderStringProperty("title", "$(item.name: pascal)", 1)
        width: $(item.width)
        height: $(item.height)
        visible: true   
        // Qt bug-workaround  - Qt only displays two windows if we don't set 'x' or 'y'
        x: 0

.      # We must reset the position of our item to see it in our Window
.      item.x = 0
.      item.y = 0
.      iterateOnItem(app, item, 2, 0, "")
    }
.    endif
.  endfor

.  for page.screen

    Window$(screen.name: pascal) {
.renderId(screen, 1)    

        // Qt bug-workaround - Qt only displays two windows if we don't set 'x' or 'y'
        x: 0
    }          
.  endfor
.endfor

}
.endif
.endtemplate
.template 0

.endtemplate
