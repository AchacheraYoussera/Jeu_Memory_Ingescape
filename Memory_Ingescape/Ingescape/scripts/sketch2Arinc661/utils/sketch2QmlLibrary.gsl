.ignorecase = 0
.template 0


#init global variables
global.sketch2qml_generateStandaloneApp = 0
global.sketch2qml_destinationRootDir = global.project_graphicFolder ? "."
global.sketch2qml_appOrLibraryRawName = "$(library.name)"
global.sketch2qml_appOrLibraryName = "$(library.name: pascal)"
global.sketch2qml_appOrLibraryDir = "$(global.sketch2qml_destinationRootDir)/$(global.sketch2qml_appOrLibraryName)"
global.sketch2qml_libraryName = "$(library.name: pascal)"
global.sketch2qml_isApp = 0
# - NB: we assume that Ingescape Circle will only export Qt6 projects
global.sketch2qml_useQt5 = defined(global.project_useQt5) & global.project_useQt5
global.sketch2qml_tabWidth = 4 


if defined(global.project_scriptFolder)
    global.sketch2qml_scriptsDir = global.project_scriptFolder
    global.sketch2qml_scriptsResourcesDir = "$(global.sketch2qml_scriptsDir)/sketch2Qml"
elsif regexp.match("^(.*)/[^/]+$", "$(script)", currentScriptRootDir)
    global.sketch2qml_scriptsDir = currentScriptRootDir
    global.sketch2qml_scriptsResourcesDir = "$(global.sketch2qml_scriptsDir)/../sketch2Qml"
else
    global.sketch2qml_scriptsDir = "../gsl_scripts/utils"
    global.sketch2qml_scriptsResourcesDir = "../gsl_scripts/sketch2Qml"
endif
echo "Using resources directory $(global.sketch2qml_scriptsResourcesDir)"


#load additional scripts
gsl from "$(global.sketch2qml_scriptsDir)/sketch2QmlCommon.gsl"


#init other global variables
global.sketch2qml_appOrLibrarySubPath = getAppOrLibrarySubPath(global.sketch2qml_appOrLibraryRawName)
global.sketch2qml_appOrLibraryQmlModule = getAppOrLibraryQmlModuleName(global.sketch2qml_appOrLibraryRawName)
global.sketch2qml_libraryQmlModule = getAppOrLibraryQmlModuleName(global.sketch2qml_appOrLibraryRawName)


#init directories
echo "Initiating $(global.sketch2qml_appOrLibraryDir) project directory structure"
initDirectories()
copyResourcesFiles()


.endtemplate
.template 1
.##########################################################
.# .PRO
.echo "Generating $(global.sketch2qml_appOrLibraryName).pro"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName).pro"
#-------------------------------------------------
#
# Project generated by Ingescape Circle on $(date.picture())
#
#-------------------------------------------------

QT       += qml quick
QT       -= gui

TARGET = $(library.name: pascal)
TEMPLATE = lib

DEFINES += $(library.name:pascal,UPPER)_BUILD_LIBRARY


# Include source files through our .pri file
!include($(global.sketch2qml_appOrLibraryName).pri) {
    error(Could not load $(global.sketch2qml_appOrLibraryName).pri)
}


#####################################################################
# OS specific rules

unix {
    target.path = /usr/lib
    INSTALLS += target
}
.##########################################################
.# .PRI
.echo "Generating $(global.sketch2qml_appOrLibraryName).pri"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName).pri"
#-------------------------------------------------
#
# File generated by Ingescape Circle on $(date.picture())
#
#-------------------------------------------------

INCLUDEPATH += $$PWD

DEFINES += $(global.sketch2qml_appOrLibraryName:UPPER)_LIBRARY

QT      += qml quick


SOURCES += \\
        $$PWD/$(global.sketch2qml_appOrLibraryName:lower)_qml.cpp


HEADERS += \\
        $$PWD/$(global.sketch2qml_appOrLibraryName:lower)_qml.h \\
        $$PWD/$(global.sketch2qml_appOrLibraryName:lower)_global.h


# Comment this line if you don't want to compile fonts
RESOURCES += $$PWD/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc


RESOURCES += \\
    $$PWD/$(global.sketch2qml_appOrLibraryName:lower).qrc 


OTHER_FILES += \\
    $$PWD/qml/$(global.sketch2qml_appOrLibrarySubPath)/qmldir \\
    $$PWD/$(global.sketch2qml_appOrLibraryName).cmake


# Additional import path used to resolve QML modules in Qt Creator's code model
QML_IMPORT_PATH += $$PWD/qml

# Additional import path used to resolve QML modules just for Qt Quick Designer
QML_DESIGNER_IMPORT_PATH += $$PWD/qml


.##########################################################
.##########################################################
.# .CMAKE
.echo "Generating $(global.sketch2qml_appOrLibraryName).cmake"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName).cmake"
#-------------------------------------------------
#
# File generated by Ingescape Circle on $(date.picture())
#
#-------------------------------------------------

set($(global.sketch2qml_appOrLibraryName:UPPER)_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR})

# Comment these lines if you don't want to compile fonts
list(APPEND $(global.sketch2qml_appOrLibraryName:UPPER)_SOURCES
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc
)


list(APPEND $(global.sketch2qml_appOrLibraryName:UPPER)_SOURCES
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower)_qml.cpp
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower)_qml.h 
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower)_global.h
    ${CMAKE_CURRENT_LIST_DIR}/$(global.sketch2qml_appOrLibraryName:lower).qrc
)


macro (add_$(global.sketch2qml_appOrLibraryName:lower)_to_target target)
  target_sources(${target} PRIVATE ${$(global.sketch2qml_appOrLibraryName:UPPER)_SOURCES})
  target_include_directories(${target} PRIVATE ${$(global.sketch2qml_appOrLibraryName:UPPER)_INCLUDE_DIR})
  target_compile_definitions(${target} PRIVATE $(global.sketch2qml_appOrLibraryName:UPPER)_LIBRARY)
endmacro()
.##########################################################
.# Global header a.k.a. export header 
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower)_global.h"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_global.h"
.renderCppGlobalHeader()
.##########################################################
.# QML library cpp
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower).cpp"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_qml.cpp"
.renderCppLibrarySource(library)
.##########################################################
.# QML library header
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower).h"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_qml.h"
.renderCppLibraryHeader()
.##########################################################
.# .QRC - QML and images
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower).qrc"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower).qrc.tmp"
.renderTempMainQrc(library, 0)
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower).qrc"
.renderCleanedQrc("$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower).qrc.tmp")
.file.delete("$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower).qrc.tmp")
.##########################################################
.# .QRC - fonts
.echo "Generating $(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc"
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc.tmp"
.renderTempFontsQrc(library)
.output "$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc"
.renderCleanedQrc("$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc.tmp")
.file.delete("$(global.sketch2qml_appOrLibraryDir)/$(global.sketch2qml_appOrLibraryName:lower)_fonts.qrc.tmp")
.##########################################################
.# qmldir
.echo "Generating qmldir"
.output "$(global.sketch2qml_appOrLibraryDir)/qml/$(global.sketch2qml_appOrLibrarySubPath)/qmldir"
.renderQmldir(library)
.##########################################################
.# theme
.echo "Generating Theme $(global.sketch2qml_appOrLibrarySubPath)/$(library.name: pascal)Theme.qml"
.output "$(global.sketch2qml_appOrLibraryDir)/qml/$(global.sketch2qml_appOrLibrarySubPath)/$(library.name: pascal)Theme.qml"
.renderTheme(library)
.##########################################################
.# font loaders
.echo "Generating font loaders $(global.sketch2qml_appOrLibraryName)FontLoaders.qml"
.output "$(global.sketch2qml_appOrLibraryDir)/qml/$(global.sketch2qml_appOrLibrarySubPath)/$(library.name: pascal)FontLoaders.qml"
.renderFontLoaders(library)
.##########################################################
.# QML files for the components
.for library.component
.   echo "Generating QML for component $(component.type: Pascal)"
.   output "$(global.sketch2qml_appOrLibraryDir)/qml/$(global.sketch2qml_appOrLibrarySubPath)/$(component.type: Pascal).qml"
.   renderComponent(library, component, 1)
.endfor
.##########################################################
.endtemplate
